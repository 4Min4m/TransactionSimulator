version: 0.2

env:
  variables:
    TF_VERSION: "1.7.5"
    TF_PLAN_FILE: "tfplan"

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing Terraform..."
      - mkdir -p /tmp/terraform_install
      - cd /tmp/terraform_install
      - wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
      - unzip -o terraform_${TF_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - cd $CODEBUILD_SRC_DIR
      - echo "Verifying Terraform installation..."
      - terraform --version

  pre_build:
    commands:
      - echo "=== COMPREHENSIVE DIAGNOSTICS START ==="
      - echo "Current working directory:"
      - pwd
      - echo "CODEBUILD_SRC_DIR value:"
      - echo $CODEBUILD_SRC_DIR
      - echo "Contents of CODEBUILD_SRC_DIR:"
      - ls -la $CODEBUILD_SRC_DIR
      - echo "Recursive listing of CODEBUILD_SRC_DIR:"
      - ls -laR $CODEBUILD_SRC_DIR
      - echo "Environment variables (filtered):"
      - env | grep -E "(CODEBUILD|ARTIFACT)" || echo "No CODEBUILD/ARTIFACT env vars found"
      - echo "Checking for common artifact locations:"
      - for dir in LambdaS3LocationArtifact LambdaPackageArtifact SourceOutput; do
          echo "Checking for directory: $dir"
          if [ -d "$dir" ]; then
            echo "  Directory $dir exists:"
            ls -la "$dir/"
            if [ -f "$dir/build.env" ]; then
              echo "  build.env found in $dir:"
              cat "$dir/build.env"
            else
              echo "  build.env NOT found in $dir"
            fi
          else
            echo "  Directory $dir does not exist"
          fi
        done
      - echo "Searching for build.env anywhere in the workspace:"
      - find $CODEBUILD_SRC_DIR -name "build.env" -type f 2>/dev/null || echo "No build.env files found"
      - echo "=== COMPREHENSIVE DIAGNOSTICS END ==="

  build:
    commands:
      - echo "Loading Lambda S3 location from previous stage..."

      # This is the multi-line script block
      # Ensure all lines starting from 'BUILD_ENV_FOUND=false' are indented by 4 spaces
      - |
        BUILD_ENV_FOUND=false
        for artifact_dir in LambdaS3LocationArtifact LambdaPackageArtifact; do
          echo "Attempting to source from $artifact_dir/build.env"
          if [ -f "$artifact_dir/build.env" ]; then
            echo "Found build.env in $artifact_dir, sourcing it..."
            . "$artifact_dir/build.env"
            BUILD_ENV_FOUND=true
            break
          else
            echo "build.env not found in $artifact_dir"
          fi
        done
        # Ensure the 'if' block here is also correctly indented relative to the '|'
        if [ "$BUILD_ENV_FOUND" = "false" ]; then
          echo "ERROR: build.env not found in any expected location"
          echo "Searching entire workspace for build.env:"
          find . -name "build.env" -type f 2>/dev/null || echo "No build.env files found anywhere"
          exit 1
        fi

      # These commands should be separate list items under 'commands:'
      - echo "LAMBDA_S3_BUCKET=$LAMBDA_S3_BUCKET"
      - echo "LAMBDA_S3_KEY=$LAMBDA_S3_KEY"

      # This is another multi-line script block for verification
      - |
        if [ -z "$LAMBDA_S3_BUCKET" ] || [ -z "$LAMBDA_S3_KEY" ]; then
          echo "ERROR: Required environment variables not set"
          echo "LAMBDA_S3_BUCKET: '$LAMBDA_S3_BUCKET'"
          echo "LAMBDA_S3_KEY: '$LAMBDA_S3_KEY'"
          exit 1
        fi

      - echo "Initializing Terraform..."
      - cd terraform
      - terraform init -reconfigure

      - echo "Running Terraform plan..."
      - terraform plan -var="lambda_s3_bucket=${LAMBDA_S3_BUCKET}" -var="lambda_s3_key=${LAMBDA_S3_KEY}" -out=${TF_PLAN_FILE}

  post_build:
    commands:
      - echo "Uploading Terraform plan artifact..."
      - mv ${TF_PLAN_FILE} $CODEBUILD_SRC_DIR/
      - echo "Terraform plan completed and artifact uploaded."

artifacts:
  files:
    - 'tfplan'
  discard-paths: yes
  name: TerraformPlanArtifact