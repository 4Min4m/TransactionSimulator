version: 0.2

env:
  variables:
    CHECK_FAIL_ON: "NONE" # Set to "NONE" or "FAILURE"

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing Checkov (IaC security scanner)..."
      - pip install checkov            
      - |
        if [ -d "backend" ] && [ -f "backend/package.json" ]; then
          echo "Installing backend dependencies..."
          cd backend/
          npm ci --only=dev || npm install --only=dev
          cd ..
        else
          echo "No backend/package.json found." # Removed global fallback, as it's better to manage deps locally.
        fi      
      - |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "Installing frontend dependencies..."
          cd frontend/
          npm ci --only=dev || npm install --only=dev
          cd ..
        else
          echo "No frontend/package.json found." # Removed global fallback.
        fi


  pre_build:
    commands:
      - echo "Verifying tool installations..."
      - checkov --version
      - node --version
      - if [ -d "backend" ] && [ -f "backend/package.json" ]; then cd backend/ && npx eslint --version && cd ..; else echo "Backend ESLint not installed."; fi
      - if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then cd frontend/ && npx eslint --version && cd ..; else echo "Frontend ESLint not installed."; fi


  build:
    commands:
      - echo "Running Checkov for IaC security scanning on Terraform files..."
      - |
        if [ -d "terraform" ]; then
          checkov -d terraform/ --framework terraform --output cli --output json --output-file-path . || CHECKOV_EXIT_CODE=$?
          if [ -f "results_json.json" ]; then
            mv results_json.json checkov_results.json
          else
            echo '{"summary": {"failed": 0, "passed": 0, "skipped": 0}, "results": {"failed_checks": []}}' > checkov_results.json
          fi
          
          # Check if we should fail on Checkov findings
          if [ "$CHECK_FAIL_ON" == "FAILURE" ] && [ "${CHECKOV_EXIT_CODE:-0}" -ne 0 ]; then
            echo "Checkov found security issues. Review checkov_results.json for details."
            cat checkov_results.json
            exit 1
          fi
        else
          echo "No terraform/ directory found, skipping Checkov scan"
          echo '{"summary": {"failed": 0, "passed": 0, "skipped": 0}, "results": {"failed_checks": []}}' > checkov_results.json
        fi
      
      - echo "Running ESLint for backend code (TypeScript)..."
      - |
        if [ -d "backend/src" ]; then
          cd backend/
          # Now that deps are in package.json, we can simply run npx eslint
          npx eslint src/ --ext .ts,.js --format json --output-file ../eslint_backend_results.json || BACKEND_LINT_EXIT_CODE=$?
          npx eslint src/ --ext .ts,.js || true  # Also show CLI output
          cd ..
          
          if [ "${BACKEND_LINT_EXIT_CODE:-0}" -ne 0 ]; then
            echo "Backend ESLint found issues. Review eslint_backend_results.json for details."
            if [ "$CHECK_FAIL_ON" == "FAILURE" ]; then
              exit 1
            fi
          fi
        else
          echo "No backend/src/ directory found, skipping backend ESLint"
          echo '[]' > eslint_backend_results.json
        fi
      
      - echo "Running ESLint for frontend code (TypeScript/React)..."
      - |
        if [ -d "frontend/src" ]; then
          cd frontend/
          # Now that deps are in package.json, we can simply run npx eslint
          npx eslint src/ --ext .ts,.tsx,.js,.jsx --format json --output-file ../eslint_frontend_results.json || FRONTEND_LINT_EXIT_CODE=$?
          npx eslint src/ --ext .ts,.tsx,.js,.jsx || true  # Also show CLI output
          cd ..
          
          if [ "${FRONTEND_LINT_EXIT_CODE:-0}" -ne 0 ]; then
            echo "Frontend ESLint found issues. Review eslint_frontend_results.json for details."
            if [ "$CHECK_FAIL_ON" == "FAILURE" ]; then
              exit 1
            fi
          fi
        else
          echo "No frontend/src/ directory found, skipping frontend ESLint"
          echo '[]' > eslint_frontend_results.json
        fi

  post_build:
    commands:
      - echo "Static analysis complete. Generating summary report..."
      - echo "=== STATIC ANALYSIS SUMMARY ==="
      - |
        if [ -f "checkov_results.json" ]; then
          CHECKOV_FAILED=$(cat checkov_results.json | jq -r '.summary.failed // 0' 2>/dev/null || echo "0")
          CHECKOV_PASSED=$(cat checkov_results.json | jq -r '.summary.passed // 0' 2>/dev/null || echo "0")
          echo "Checkov: $CHECKOV_FAILED failed, $CHECKOV_PASSED passed"
        fi
      - |
        if [ -f "eslint_backend_results.json" ]; then
          BACKEND_ISSUES=$(cat eslint_backend_results.json | jq 'length' 2>/dev/null || echo "0")
          echo "Backend ESLint: $BACKEND_ISSUES files with issues"
        fi
      - |
        if [ -f "eslint_frontend_results.json" ]; then
          FRONTEND_ISSUES=$(cat eslint_frontend_results.json | jq 'length' 2>/dev/null || echo "0")
          echo "Frontend ESLint: $FRONTEND_ISSUES files with issues"
        fi
      - echo "Review detailed results in the artifacts for specific findings."

artifacts:
  files:
    - 'checkov_results.json'
    - 'eslint_backend_results.json'
    - 'eslint_frontend_results.json'
  name: static-analysis-results

cache:
  paths:
    - '/usr/local/n/versions/node/**'
    - '/root/.cache/pip/**'
    - '/usr/local/lib/python3.11/site-packages/**'
    - '/usr/local/lib/node_modules/**'
    - 'backend/node_modules/**'
    - 'frontend/node_modules/**'