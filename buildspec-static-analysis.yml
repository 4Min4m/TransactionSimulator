version: 0.2

env:
  variables:
    CHECK_FAIL_ON: "NONE" # Set to "NONE" or "FAILURE"

phases:
  install:
    runtime-versions:
      nodejs: 20
      python: 3.11
    commands:
      - echo "Installing Checkov (IaC security scanner)..."
      - pip install checkov
            
      - |
        if [ -d "backend" ] && [ -f "backend/package.json" ]; then
          echo "Installing backend dependencies..."
          cd backend/
          npm ci --only=dev || npm install --only=dev # This will now run, but install nothing if no devDeps are listed
          cd ..
        else
          echo "No backend/package.json found."
        fi
      
      - |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "Installing frontend dependencies..."
          cd frontend/
          npm ci --only=dev || npm install --only=dev # This will now run, but install nothing if no devDeps are listed
          cd ..
        else
          echo "No frontend/package.json found."
        fi

  pre_build:
    commands:
      - echo "Verifying tool installations..."
      - checkov --version
      - node --version
  build:
    commands:
      - echo "Running Checkov for IaC security scanning on Terraform files..."
      - |
        if [ -d "terraform" ]; then
          checkov -d terraform/ --framework terraform --output cli --output json --output-file-path . || CHECKOV_EXIT_CODE=$?
          if [ -f "results_json.json" ]; then
            mv results_json.json checkov_results.json
          else
            echo '{"summary": {"failed": 0, "passed": 0, "skipped": 0}, "results": {"failed_checks": []}}' > checkov_results.json
          fi
          
          # Check if we should fail on Checkov findings
          if [ "$CHECK_FAIL_ON" == "FAILURE" ] && [ "${CHECKOV_EXIT_CODE:-0}" -ne 0 ]; then
            echo "Checkov found security issues. Review checkov_results.json for details."
            cat checkov_results.json
            exit 1
          fi
        else
          echo "No terraform/ directory found, skipping Checkov scan"
          echo '{"summary": {"failed": 0, "passed": 0, "skipped": 0}, "results": {"failed_checks": []}}' > checkov_results.json
        fi

  post_build:
    commands:
      - echo "Static analysis complete. Generating summary report..."
      - echo "=== STATIC ANALYSIS SUMMARY ==="
      - |
        if [ -f "checkov_results.json" ]; then
          CHECKOV_FAILED=$(cat checkov_results.json | jq -r '.summary.failed // 0' 2>/dev/null || echo "0")
          CHECKOV_PASSED=$(cat checkov_results.json | jq -r '.summary.passed // 0' 2>/dev/null || echo "0")
          echo "Checkov: $CHECKOV_FAILED failed, $CHECKOV_PASSED passed"
        fi
      - echo "Review detailed results in the artifacts for specific findings."

artifacts:
  files:
    - 'checkov_results.json'
  name: static-analysis-results
  
cache:
  paths:
    - '/usr/local/n/versions/node/**'
    - '/root/.cache/pip/**'
    - '/usr/local/lib/python3.11/site-packages/**'
    - '/usr/local/lib/node_modules/**'
    - 'backend/node_modules/**'
    - 'frontend/node_modules/**'