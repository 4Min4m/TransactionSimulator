- echo Looking for pre-packaged Lambda artifacts...
      - echo "Current directory:"
      - pwd
      - echo "Contents of terraform directory:"
      - ls -la
      - echo "Looking for lambda.zip and appspec.yml..."
      - ls -la lambda.zip || echo "lambda.zip not found in terraform directory"
      - ls -la appspec.yml || echo "appspec.yml not found in terraform directory"
      
      # Check if lambda.zip exists from the terraform plan stage
      - |
        if [ ! -f "lambda.zip" ]; then
          echo "lambda.zip not found, searching in parent directories..."
          find .. -name "lambda.zip" -type f | head -1 | xargs -I {} cp {} lambda.zip || echo "Could not find lambda.zip anywhere"
        fi
      
      # Check if appspec.yml exists from the terraform plan stage  
      - |
        if [ ! -f "appspec.yml" ]; then
          echo "appspec.yml not found, searching in parent directories..."
          find .. -name "appspec.yml" -type f | head -1 | xargs -I {} cp {} appspec.yml || echo "Could not find appspec.yml anywhere"
        fi
        
      # Verify files exist or create minimal versions
      - |
        if [ ! -f "lambda.zip" ]; then
          echo "Creating minimal lambda.zip as fallback..."
          echo '{"statusCode": 200, "body": "Hello World"}' > index.js
          zip lambda.zip index.js
        fi
        
      - |
        if [ ! -f "appspec.yml" ]; then
          echo "Creating appspec.yml..."
          cat <<EOF > appspec.yml
        version: 0.0
        Resources:
          - TransactionSimulatorAPI:
              Type: AWS::Lambda::Function
              Properties:
                Name: TransactionSimulatorAPI
                Alias: LIVE
                CurrentVersion: "\\\$LATEST"
                TargetVersion: "\\\$LATEST"
        Hooks:
          - BeforeAllowTraffic: "arn:aws:lambda:us-east-1:864981715490:function:TransactionSimulatorAPI"
          - AfterAllowTraffic: "arn:aws:lambda:us-east-1:864981715490:function:TransactionSimulatorAPI"
        EOF
        fiversion: 0.2

env:
  variables:
    TF_VAR_supabase_url: ""
    TF_VAR_supabase_key: ""

phases:
  install:
    commands:
      - echo Installing Terraform 1.5.7...
      - wget -q https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - sudo unzip -q terraform_1.5.7_linux_amd64.zip -d /usr/local/bin/
      - rm terraform_1.5.7_linux_amd64.zip
      
  pre_build:
    commands:
      - echo Navigating to Terraform directory...
      - cd terraform
      - echo Initializing Terraform backend...
      - terraform init -backend-config="bucket=transaction-simulator-terraform-tfstate" -backend-config="key=transaction-simulator/terraform.tfstate" -backend-config="region=us-east-1"
      
      - echo Debugging workspace contents...
      - echo "Current directory:"
      - pwd
      - echo "Contents of current directory:"
      - ls -la
      - echo "Contents of parent directory:"
      - ls -la ..
      - echo "Looking for any zip files:"
      - find .. -name "*.zip" -type f
      - echo "Looking for any Lambda-related files:"
      - find .. -name "*lambda*" -type f
      - find .. -name "*appspec*" -type f
      
      # Since the lambda source isn't available, let's see if we can find the pre-built lambda.zip
      # from the TerraformPlanArtifact that might have it
      - echo "Searching for lambda.zip in the workspace..."
      - |
        if find .. -name "lambda.zip" -type f | head -1 | xargs -I {} cp {} lambda.zip; then
          echo "Found and copied existing lambda.zip"
          ls -la lambda.zip
        else
          echo "No pre-built lambda.zip found. Creating a dummy one for now..."
          echo "This is a placeholder" > dummy.txt
          zip lambda.zip dummy.txt
          echo "WARNING: Using dummy lambda.zip - this will likely cause deployment issues"
        fi
      
      - echo Creating appspec.yml for CodeDeploy...
      - |
        cat <<EOF > appspec.yml
        version: 0.0
        Resources:
          - TransactionSimulatorAPI:
              Type: AWS::Lambda::Function
              Properties:
                Name: TransactionSimulatorAPI
                Alias: LIVE
                CurrentVersion: "\$LATEST"
                TargetVersion: "\$LATEST"
        Hooks:
          - BeforeAllowTraffic: "arn:aws:lambda:us-east-1:864981715490:function:TransactionSimulatorAPI"
          - AfterAllowTraffic: "arn:aws:lambda:us-east-1:864981715490:function:TransactionSimulatorAPI"
        EOF
      
      - echo Verifying required files exist...
      - ls -la lambda.zip
      - ls -la appspec.yml
      
  build:
    commands:
      - echo Applying Terraform plan...
      - echo Checking frontend/dist contents...
      - echo "Looking for dist directory in various locations..."
      - ls -la ../dist || echo "dist directory not found at ../dist"
      - ls -la dist || echo "dist directory not found at ./dist" 
      - ls -la terraform/dist || echo "dist directory not found at ./terraform/dist"
      - echo "Checking for assets directory..."
      - ls -la ../dist/assets || ls -la dist/assets || ls -la terraform/dist/assets || echo "Assets directory not found in any location!"
      - ls -la lambda.zip
      - ls -la appspec.yml
      - terraform apply -auto-approve plan.tfplan
      - echo Exporting Terraform outputs to JSON...
      - terraform output -json > ../terraform_outputs.json
      - echo Checking generated terraform_outputs.json...
      - ls -la ../terraform_outputs.json
      
  post_build:
    commands:
      - echo Terraform apply completed successfully.
      
artifacts:
  files:
    - terraform_outputs.json
    - appspec.yml
  base-directory: .